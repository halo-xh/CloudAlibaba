spring:
  application:
    name: cloud-simple
  datasource:
    name: testerDS
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://127.0.0.1:3306/tester?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      poolName: Hikari
      auto-commit: false

  redis:
    host: 127.0.0.1
    port: 6379

  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    database: MYSQL
    show-sql: true
    properties:
      hibernate.query.substitutions: true 'T', false 'F'
      hibernate.jdbc.batch_size: 30
      hibernate.format_sql: true
      org.hibernate.envers.auditTableSuffix: _AUD
      org.hibernate.envers.revisionTypeFieldName: REV_TYPE
      org.hibernate.envers.doNotAuditOptimisticLockingField: false
      hibernate.id.new_generator_mappings: true
      hibernate.connection.provider_disables_autocommit: true
      hibernate.dialect.storage_engine: innodb
    hibernate:
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
      ddl-auto: none

server:
  port: 7777
  servlet:
    context-path: /cloud-simple
management:
  endpoint:
    bindings:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  pattern:
    level: DEBUG
  level:
    com:
      alicp:
        jetcache: DEBUG
#    console: >-
#      {"date":"%d{yyyy-MM-dd HH:mm:ss.SSS}","thread":"%thread","traceId":"%X{tid}" ,"level":"%-5level","env":"%property{spring.profiles.active}","appname":"${spring.application.name}","productline":"${logging.custom.productline}","logger":"%logger{50}","msg":"%replace(%msg %replace(%replace(%replace(%xException){"\r\n", "\\n"}){"\n", "\\n"}){"\t", "\\t"}%nopex){"\"", "\'"}"}%n

jetcache:
  statIntervalMinutes: 60
  areaInCacheName: false
  penetrationProtect: false
  local:
    default:
      type: linkedhashmap # 支持的类型：linkedhashmap、caffeine
      limit: 100
      keyConvertor: fastjson # 支持的类型：fastjson，可自定义转换器函数
      expireAfterWriteInMillis: 6000
      expireAfterAccessInMillis: 3000
  remote:
    default:
      broadcastChannel: jacacheChannel
      type: redisson # 支持的类型：redis、redis.lettuce
      keyPrefix: 'sample:jetcache:'
      keyConvertor: fastjson
      valueEncoder: kryo5 # 支持的类型：kryo、java，可自定义编码器 使用java实体增减字段后反序列化第一次会报错 使用 kryo5 不会
      valueDecoder: kryo5 # 支持的类型：kryo、java，可自定义解码器
      expireAfterWriteInMillis: 3600
      #readFrom: slavePreferred # 优先从Slave节点中读取
      #uri: redis-sentinel://host1:26379,host2:26379,host3:26379/?sentinelMasterId=mymaster # 哨兵模式
      uri: redis://127.0.0.1:6379/ # 单节点模式
      #mode: masterslave # 设置为主从模式
      #uri: # 集群模式
      #- redis://127.0.0.1:7000
      #- redis://127.0.0.1:7001
      #- redis://127.0.0.1:7002

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl